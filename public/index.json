
[{"content":" 1.聚合导航网站 # OneNav # 2.专辑封面墙壁，未来实现点击选歌，展示专辑点评，apple music为标杆 # Apple music JayChou # 3.解决播放完毕暂停问题 # 4.实现skill icons图片展示 # skill icons # Like: # ","date":"12 December 2024","externalUrl":null,"permalink":"/prj/todo/todo/","section":"Prjs","summary":"","title":"Todo","type":"prj"},{"content":"学海无涯\nSelfHost: # 类型 名称 介绍 链接 完成情况 图标 Photos Immich 自托管照片和视频管理 Immich ❌ Blog Hugo 快速灵活的静态网站生成器 Hugo ✏️ Home HomeAsstant 开源家庭自动化系统 HomeAsstant ❌ Develop code-server 在任何设备上编写代码 code-server ❌ Sync Syncthing 点对点文件同步应用程序 Syncthing ❌ Reverse Proxy Nginx 反向代理 nginx ✏️ Monitor Uptime-kuma 监控网站状况 uptime-kuma ✏️ File Sharing Alist 媒体存储 Alist ❌ Wiki Docusaurus 易于维护的开源文档网站 docusaurus ❌ Note-Taking Hedgedoc 实时合作markdown编辑器 Hedgedoc ❌ Password Manager KeePassDX 现代、安全的密码管理器 keepassxc ❌ Forum Discourse 社区讨论平台 discource ❌ Forum Flarum 打造优秀社区的简单论坛软件 flarum ❌ Proxy Open Clash 运行在 OpenWrt 上的 Clash 客户端 OpenClash ❌ Note-Taking Joplin 同步功能的安全记事 joplin ❌ Media-streaming Jellyfish 媒体的管理和流媒体播放 jellyfin ❌ Note-Taking SiYuan 开源笔记软件 SiYuan ❌ Dashboard Homepage 可定制主页 Homepage ❌ GFW OpenGFW Linux 上实现 GFW的软件 opengfw ❌ 其它： # 类型 名称 简介 链接 完成情况 图标 OS FnOS 国产NAS系统 fnnas ✏️ OS ENDAVOUROS 基于Arch Linux简单、现代且高度可定制 ENDAVOUROS ❌ OS Arch Linux 轻量级、灵活且高度可定制的 Linux 发行版 arch linux ❌ OS Kali Linux 基于 Debian,专注于网络安全和渗透测试 kali ❌ OS black Arch 基于 Arch Linux专注于网络安全和渗透测试 black arch ❌ OS Linux kernel Linux内核 kernerl ❌ VM Proxmox VE 基于 Web 的管理界面全功能的虚拟化管理平台 proxmox ❌ VM Docker 容器化技术 docker ✏️ pkg flathub 基于 Flatpak 的应用商店和软件分发平台 Flathub ✏️ Pkg flatpak 旨在解决 Linux 应用程序兼容性问题 flatpak ✏️ OS OpenWrt OpenWrt Linux 操作系统 Openwrt ❌ Proxy Mihomo 一个代理客户端 mihomo ❌ Proxy Mihomo-party 一个更易用的代理客户端 mihomo-party ❌ Proxy Sing-Box 通用代理平台 sing-box ❌ ","date":"12 December 2024","externalUrl":null,"permalink":"/prj/selfhost/sh/","section":"Prjs","summary":"","title":"SelfHost","type":"prj"},{"content":" Business Company own Mirror Website: # Aliyun:https://developer.aliyun.com/mirror/\nHuaWei:https://mirrors.huaweicloud.com/home\nNetEase: https://mirrors.163.com/\nTencent: https://mirrors.cloud.tencent.com/\nUnversity Own Mirror Website: # you know,which pop,which slow:\n校园网联合镜像站: https://mirrors.cernet.edu.cn/about\n北京外国语大学: https://mirrors.bfsu.edu.cn/\n上海体育学院: https://mirrors.sustech.edu.cn/\n南京大学: https://mirrors.nju.edu.cn/\n浙江大学: https://mirrors.zju.edu.cn/\n上海交通大学: https://mirrors.sjtug.sjtu.edu.cn/\n北京大学: https://mirrors.pku.edu.cn/\n中国科学技术大学: https://mirrors.ustc.edu.cn/\n清华大学: https://mirrors.tuna.tsinghua.edu.cn/\n","date":"16 December 2024","externalUrl":null,"permalink":"/prj/mirror/mirror/","section":"Prjs","summary":"","title":"Mirror Website","type":"prj"},{"content":"","date":"16 December 2024","externalUrl":null,"permalink":"/prj/","section":"Prjs","summary":"","title":"Prjs","type":"prj"},{"content":" 环境要求 # 5.6 \u0026lt;= PHP \u0026lt;= 7.4 需支持SQLite PHP需支持pdo_sqlite组件 #依赖 sudo apt update \u0026amp;\u0026amp; apt upgrade -y sudo apt install -y software-properties-common apt-transport-https #添加PHP源 sudo nano /etc/apt/source.list.d/php.list deb https://mirrors.nju.edu.cn/php/ bookworm main sudo apt update #安装PHP5.6/7.4 sudo apt install -y php5.6 php5.6-cli php5.6-sqlite php5.6-pdo_sqlite sudo apt install -y php7.4 php7.4-cli php7.4-sqlite php7.4-pdo_sqlite #验证环境要求 php -v php -m | grep sqlite php -m | grep pdo_sqlite installation: # git clone https://dgithub.xyz/helloxz/onenav.git ","date":"13 December 2024","externalUrl":null,"permalink":"/prj/onenav/onenav/","section":"Prjs","summary":"","title":"OneNav Navigate","type":"prj"},{"content":" My GPG Pub Key # Already Used In GitHub\n-----BEGIN PGP PUBLIC KEY BLOCK----- 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 =Cy9e -----END PGP PUBLIC KEY BLOCK----- ","date":"12 December 2024","externalUrl":null,"permalink":"/prj/gpg/gpg/","section":"Prjs","summary":"","title":"My GPG Pub Key","type":"prj"},{"content":" Freeebsd # ","date":"11 December 2024","externalUrl":null,"permalink":"/prj/freebsd-try/freebsd-try/","section":"Prjs","summary":"","title":"FreeBSD Try","type":"prj"},{"content":" FreeBSD # ","date":"11 December 2024","externalUrl":null,"permalink":"/prj/freebsd-vm/freebsdvm/","section":"Prjs","summary":"","title":"FreeBSD VM","type":"prj"},{"content":" Hugo Installation✅ # Hugo Configuration✅ # Hugo Deploy On Github✅ # Hugo Deploy On CloudFlare✅ # Hugo Add Content✅ # Hugo beautify WebSite✅ # ","date":"9 December 2024","externalUrl":null,"permalink":"/prj/catalogue/catalogue/","section":"Prjs","summary":"","title":"Hugo-prj目录","type":"prj"},{"content":" Create a site Add content Configure the site Publish the site 我将在parallels desktop提供的Debian虚拟机上演示从安装配置到成型的过程：\n安装HUGO\n安装hugo（扩展版或扩展/部署版，v0.128.0 或更高版本）\n官网：https://gohugo.io/installation/linux/\n要安装HUGO，必须先安装git，go，dart sass：\ngit： Build Hugo from source 从源代码构建 Hugo Use the Hugo Modules feature 使用 Hugo 模块功能 Install a theme as a Git submodule 安装主题作为 Git 子模块 Access commit information from a local Git repository 从本地 Git 仓库访问提交信息 Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify 托管您的网站，使用 CloudCannon、Cloudflare Pages、GitHub Pages、GitLab Pages 和 Netlify 等服务 go： Build Hugo from source 从源代码构建 Hugo Use the Hugo Modules feature 使用 Hugo 模块功能 Dart Sass： Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language. Dart Sass 是使用 Sass 语言的最新功能时将 Sass 转换为 CSS 所必需的。 安装hugo的方法： # 预构建的二进制文件\ngit clone https://dgithub.xyz/gohugoio/hugo.git Download\u0026mdash;extract\u0026mdash;move\u0026mdash;add PATH\u0026mdash;chmod\n使用包管理器\nsnap安装 sudo apt-get install snapd #先安装snap sudo snap install hugo #安装hugo扩展版 sudo snap connect hugo:removable-media #启用对可移动媒体访问权限 sudo snap connect hugo:ssh-keys #要启用对 SSH 密钥的访问： homebrew安装 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; #安装homebrew（macos和linux的包管理器） sudo brew install hugo #brew安装hugo 代码仓库包安装\ndebian apt安装\nsudo apt install hugo 从源代码构建：\nGit\nGO （version：1.20+）\nGCC / Clang\nadd PATH\nCGO_ENABLED=1 go install -tags extended,withdeploy github.com/gohugoio/hugo@latest 自主学习GO：https://go.dev/doc/code#Command\n完整地安装配置GO：\n#安装go sudo apt-get update sudo apt-get install golang-go go version #配置go export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin source ~/.bashrc （source ~/.zshrc） echo $GOPATH echo $PATH 添加 Hugo 到 PATH\nexport PATH=$PATH:$GOPATH/bin source ~/.bashrc # 如果你使用的是 bash source ~/.zshrc # 如果你使用的是 zsh echo $PATH ","date":"9 December 2024","externalUrl":null,"permalink":"/prj/install/install/","section":"Prjs","summary":"","title":"Hugo安装","type":"prj"},{"content":" Hugo美化网站 # Github-style # 一个GitHub主题的Hugo主题：\n参考网址：https://themes.gohugo.io/themes/github-style/\n#获取主题： git submodule add git@github.com:MeiK2333/github-style.git themes/github-style #更新： cd themes/github-style git pull #更改目录名 mv content/posts content/post #设置README hugo new readme.md gedit content/readme.md #修改ture为false 特色功能使用： +++ ...... pin = true +++ #pin帖子 +++ ...... summary = \u0026#34;The summary content\u0026#34; +++ #显示摘要 enableGitalk = true [params.gitalk] clientID = \u0026#34;Your client ID\u0026#34; clientSecret = \u0026#34;Your client secret\u0026#34; repo = \u0026#34;repo\u0026#34; owner = \u0026#34;Your Github username\u0026#34; admin = \u0026#34;Your Github username\u0026#34; id = \u0026#34;location.pathname\u0026#34; labels = \u0026#34;gitalk\u0026#34; perPage = 30 pagerDirection = \u0026#34;last\u0026#34; createIssueManually = true distractionFreeMode = false #添加以上内容到config.toml,启动GitHub留言功能 [params] enableSearch = true [outputs] home = [\u0026#34;html\u0026#34;, \u0026#34;json\u0026#34;] [outputFormats.json] mediaType = \u0026#34;application/json\u0026#34; baseName = \u0026#34;index\u0026#34; isPlainText = false #添加以上内容到config.toml，实现本地搜索 Docsy # 一个用于技术文档网站的 Hugo 主题：\n参考网址：https://themes.gohugo.io/themes/docsy/\nBlowfish # Blowfish 是一个轻量有力的 Hugo 主题。它使用 Tailwind CSS 构建，洁净而富有极简主义，是你网站内容载体的不二之选。\n参考网址：https://dgithub.xyz/nunocoracao/blowfish/blob/main/README.zh-cn.md\n​\thttps://blowfish.page/zh-cn/docs/getting-started/\n体验网址：https://blowfish.page/\n确保已安装 Node.js、 Git、 Go 和 Hugo ，且已经创建了一个 Hugo 工程。✅\n使用 npm（或其他软件包管理器）全局安装 CLI 工具： sudo cnpm i -g blowfish-tools #cnpm镜像下载 然后运行 \u0026ldquo;blowfish-tools \u0026ldquo;命令，开启一个交互式进程，引导你完成创建和配置。 blowfish-tools 配置 Blowfish 作为 git 子模块\ncd Hugo git submodule add -b main https://dgithub.xyz/nunocoracao/blowfish.git themes/blowfish #dgithub.xyz镜像下载 #module很大，你忍一下（500MB+ 在你的网站根目录中，删除 Hugo 自动生成的 hugo.toml 文件。从主题中复制 *.toml 文件，粘贴到 config/_default/ 目录中。这将确保你的主题设置准确无误，在此基础上你能够轻松地自定义主题。\ncd themes/blowfish/_default gedit hugo.toml #确保内容有： theme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE（取消注释这一行 baseURL = \u0026#34;https://kipjaychou.github.io/hugo/\u0026#34; defaultContentLanguage = \u0026#34;zh\u0026#34; 修改languages.en.toml文件：\nmv languages.en.toml languages.zh.toml gedit languages.zh.toml #对部分修改内容，取消注释 修改params.toml文件：\ngedit params.toml #colorScheme 可选的值有blowfish （默认）、avocado、fire、ocean、forest、princess、neon、bloody、terminal、marvel、noir、autumn、congo和slate。 部分颜色示例：\nHugo 默认是使用帖子、标签和类别，这三种可以开箱即用的。但如果你希望自定义，那么可以创建 taxonomies.toml 配置文件来实现：\n详细链接：https://gohugo.io/content-management/taxonomies/\ntopic = \u0026#34;topics\u0026#34; 菜单：\nBlowfish 有两个可以定制的菜单，以此来适配网站中的内容和布局。main菜单出现在网站头部，footer菜单出现在页面底部和版权声明上方。\n这两个菜单都是配置在 menus.en.toml 文件中。与语言配置文件类似，如果你希望使用另一种语言，请重命名这个文件并将 en 替换为你所希望的语言代码。\nmv menus.en.toml menus.zh.toml gedit menus.zh.toml blowfish内置图标：https://blowfish.page/zh-cn/samples/icons/\n# 比如修改以下内容： [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; pre = \u0026#34;edit\u0026#34; weight = 10 [[main]] name = \u0026#34;Github\u0026#34; pageRef = \u0026#34;https://github.com/KipJayChou\u0026#34; pre = \u0026#34;github\u0026#34; weight = 20 嵌套菜单\nBlowfish 还支持嵌套菜单。你需要在menu.toml 中定义一个父级菜单项及其子菜单，使用 parent 可以指定子菜单项的父级。在上面菜单部分提到的所有参数一样适用于子菜单项，同样地，pageRef 和 url 也可以在父菜单项中使用。还需要注意一点，嵌套菜单只能在 main 菜单中可用，即网站头部的菜单。\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 子导航菜单\n此外，你可以设置一个子导航菜单。只需要在 menus.toml 中将新的菜单项定义为 subnavigation 即可。 这将在主菜单下面展示第二行，其中包含子类别项。\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 缩略图 \u0026amp; 背景\nBlowfish 的创立开端旨在便于为文章添加视觉效果。如果你熟悉 Hugo 的文章结构，只需要在你文章所在的文件夹中，放置一个以feature*开头的图像文件（Blowfish支持所有格式的文件，但更推荐使用 .png 或 .jpg）。就这样，Blowfish 就能够将图像文件作为文章的缩略图，而且能够在社交平台的 \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;https://oembed.com/\u0026quot;\u0026gt;oEmbed\u0026lt;/a\u0026gt; 卡片中使用。\n抓bug： # 使用了dgithub.xyz导致403 # 要换成github.com\n更新子模块 URL 并同步和更新子模块不会重置你对 Blowfish 主题的配置文件。子模块的更新只会影响子模块的代码，而不会影响你项目中的配置文件。\n具体步骤 # 更新子模块 URL：\ngit submodule set-url themes/blowfish https://github.com/nunocoracao/blowfish.git 同步子模块：\ngit submodule sync --recursive 更新子模块：\ngit submodule update --init --recursive 解释 # git submodule set-url：\n这个命令只会更新子模块的 URL，不会影响你的项目文件或配置。 git submodule sync --recursive：\n这个命令会将子模块的 URL 更新到 .git/config 文件中，确保 Git 使用新的 URL 进行克隆。它不会影响你的项目文件或配置。 git submodule update --init --recursive：\n这个命令会初始化并更新子模块，确保子模块的代码是最新的。它只会更新子模块的代码，不会影响你的项目文件或配置。 总结 # 更新子模块 URL 并同步和更新子模块不会重置你对 Blowfish 主题的配置文件。子模块的更新只会影响子模块的代码，而不会影响你项目中的配置文件。你可以放心地更新子模块，而不用担心配置文件被重置。\nGitHub pages找不到hugo.toml # 由于blowfish文档说要删除/Hugo根目录下的hugo.toml，而且GitHub pages找不到在~/Hugo/themes/blowfish/config/_default的hugo.toml,于是：\ntouch hugo.toml gedit hugo.toml #内容如下： baseURL = \u0026#34;https://kipjaychou.github.io/Hugo/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My Hugo Site\u0026#34; theme = \u0026#34;blowfish\u0026#34; [params] contentDir = \u0026#34;content\u0026#34; sectionPagesMenu = \u0026#34;main\u0026#34; Hugo install.md的date格式不符合 YAML 规范 # #错误： --- date = \u0026#39;2024-12-08\u0026#39; draft = false title = \u0026#39;Hugo Install\u0026#39; --- #正确： --- date: \u0026#39;2024-12-08\u0026#39; draft: false title: \u0026#39;Hugo Install\u0026#39; --- --- title: \u0026#34;自部署\u0026#34; description: \u0026#34;自部署笔记教程\u0026#34; --- ### docker ### Uptime-Kuma ### FnOS ### Hugo ### Nginx 安装\n","date":"9 December 2024","externalUrl":null,"permalink":"/prj/beautify/beautify/","section":"Prjs","summary":"","title":"Hugo美化","type":"prj"},{"content":" 配置HUGO # 参考文献：https://gohugo.io/getting-started/quick-start/ 验证hugo版本 \u0026gt; v0.128.0\n运行这些命令以使用 Ananke 主题创建 Hugo 站点:\nhugo new site Hugo #创建您的项目目录结构在 quickstart 目录中 cd Hugo git init #初始化当前目录下的空 Git 仓库。 git submodule add https://dgithub.xyz/theNewDynamic/gohugo-theme-ananke.git themes/ananke #将 Ananke 主题克隆到 themes 目录中，将其作为 Git 子模块添加到您的项目中。 #将一个 Git 仓库作为子模块（submodule）添加到当前的 Git 仓库中。 echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml #向网站配置文件中添加一行，指明当前主题。 hugo server #启动 Hugo 的开发服务器以查看网站。 可以在localhost:1313访问初始网页\n创建内容： # hugo new content content/posts/hugo-install.md 在md文本内加入内容：✅Hugo1.0安装.md\n保存文件，然后启动 Hugo 的开发服务器以查看网站。您可以使用以下任一命令包含草稿内容.\nhugo server --buildDrafts hugo server -D 当您对新的内容满意时，将前言的 draft 参数设置为 false 。\n成功显示内容！\n配置网站 # 在Hugo目录下，修改内容为以下：\nnano hugo.toml #填入以下内容 baseURL = \u0026#39;https://kipjaychou.org/\u0026#39; languageCode = \u0026#39;zh-cn\u0026#39; title = \u0026#39;KipJayChou HOME\u0026#39; theme = \u0026#39;ananke\u0026#39; 启动 Hugo 开发服务器以查看您的更改，记得包括草稿内容。\nhugo server -D hugo server --buildDrafts 发布网站 # 在这个步骤中，您将发布您的网站，但不会部署它。\n当你发布你的网站时，Hugo 会在你的项目根目录下的 public 目录中创建整个静态网站。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资源。\n当你发布网站时，通常不希望包含草稿、未来或过期的内容。命令很简单。\nhugo ","date":"9 December 2024","externalUrl":null,"permalink":"/prj/config/config/","section":"Prjs","summary":"","title":"Hugo配置","type":"prj"},{"content":"拒绝内卷，追求自由 本周话题 Promox VE 用于跑虚拟机的宿主系统 Proxmox VE是一款基于Debian Linux的完全开源平台，专为虚拟机和容器管理而设计。 Proxmox VE 是一款开源免费的服务器虚拟化环境，你可以将它想象成一个专门用于跑虚拟机的宿主系统 (虚拟机管理平台)，它同时支持两种虚拟化技术：KVM 虚拟机和 LXC 容器。你能在 VPS 服务器或普通 PC 电脑上安装它，就能随意创建多个虚拟机，同时运行各种各样操作系统。 所以，你家里只需买一台小巧的 Intel NUC、小米迷你主机、路由器等设备，或者在服务器上，安装 PVE 之后，你就拥有了一个万能的“虚拟平台”了！各种系统随便搞，随便玩，也能通过 Docker 容器安装各种软件和网络应用为家里、公司团队的成员提供服务，简直就是折腾无极限！ 🎵欢迎来到周杰伦的音乐世界🎵 选择专辑 叶惠美 专辑详细信息 周杰伦·2003年\n从“以父之名”判决罪恶的杀手，到等待“晴天”的短暂爱恋，再到奏响一曲“东风破”以纪念离人。周杰伦穿梭时空之间，将复古与现代巧妙融合，创造出时下流行乐不曾有的新元素。以最敬爱的母亲姓名命名专辑，主打歌《以父之名》又与之诙谐呼应，但实则其是以电影《教父》为灵感，探讨教父亲耀背后的孤独，复古的音乐钢琴辅以意大利念白，加之融入歌剧元素，塑造出的黑暗哥特曲风一度冲击着主流的流行乐，而新兴鬼才黄俊郎的词作更是锦上添花。禁毒主题的《懦夫》中，“周式”说唱搭配重金属摇滚风格，则再次突围流行乐的风格边界。方文山作词的《东风破》以唐诗宋词入歌，配上二胡与琵琶弹奏的古曲小调，缱绻的旋律扣人心弦，这一首创的中国风歌曲在流行乐领域开凿先河，至今仍是中国风歌曲难以逾越的标杆。\n歌曲 以父之名 您的浏览器不支持 audio 元素。 懦夫 您的浏览器不支持 audio 元素。 晴天 您的浏览器不支持 audio 元素。 三年二班 您的浏览器不支持 audio 元素。 東風破 您的浏览器不支持 audio 元素。 你聽得到 您的浏览器不支持 audio 元素。 同一種調調 您的浏览器不支持 audio 元素。 她的睫毛 您的浏览器不支持 audio 元素。 愛情懸崖 您的浏览器不支持 audio 元素。 梯田 您的浏览器不支持 audio 元素。 雙刀 ","date":"9 December 2024","externalUrl":null,"permalink":"/","section":"KipJayChou","summary":"","title":"KipJayChou","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]